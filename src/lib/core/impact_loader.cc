/* Copyright (C) 
 * 2012 - Joshua Gwinn (jdgbolt@gmail.com)
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 */

/**
 * @file loader.cc
 * @brief Source file for the ImpactLoader class, which handles loading of
 * textual game data and parsing it, returning it in usable form for the core
 * module to handle.
 * @author Joshua Gwinn (jdgbolt@gmail.com)
 * @version 
 * @date 2012-02-03
 */

#include "impact_loader.hh"

json_t *
ImpactLoader::file_load(std::string fileName)
{
   // String holding the filename with extension
   std::string tempFileName = dataDIR + fileName + ".json";
   // Size of the file
   unsigned long fileSize;
   // File handler
   std::ifstream file;
   // JSON object for storing parsed json
   json_t *loaded = NULL;
   // Object to store JSON loading errors, if any
   json_error_t loadedErrors;

   file.open(tempFileName.c_str(), std::ios::ate);
   if (file.good())
     {
        // Load .json file
        fileSize = file.tellg();
        file.seekg(0);
        file.read(fileString, fileSize);
        // Make last character null to ensure compatibiity with conventions of
        // character arrays
        fileString[fileSize] = '\0';
     }
   else
     {
        // Load .lz4 file
        tempFileName = dataDIR + fileName + ".lz4";
        file.open(tempFileName.c_str(), std::ios::ate | std::ios::binary);
        if (!file.good())
          {
             Log_ERR("Could not load %s: File not found!\n", tempFileName.c_str());
             return NULL;
          }
        fileSize = (unsigned long)file.tellg() - ARCHIVE_MAGICNUMBER_OFFSET;
        file.seekg(0);
        file.read(fileBuffer, ARCHIVE_MAGICNUMBER_SIZE);
        unsigned int fileType = *(unsigned int*)fileBuffer;
        // Check magic number to ensure it was generated by lz4comp
        if (fileType != ARCHIVE_MAGICNUMBER)
          {
             Log_ERR("Could not load %s: File not compressed LZ4 file!\n", tempFileName.c_str());
             return NULL;
          }
        file.seekg(ARCHIVE_MAGICNUMBER_OFFSET);
        // Load the file into the buffer
        file.read(fileBuffer, fileSize);
        // Decompress the file, which returns the bytes decompressed
        long uncompressedFileSize = LZ4_uncompress_unknownOutputSize(
           fileBuffer, fileString, fileSize, fileSize * 10);
        if (uncompressedFileSize < 0)
          {
             Log_ERR("Could not load file %s: Error parsing LZ4 file!\n", tempFileName.c_str());
             return NULL;
          }
        // Make the last character of the string null for compatibility with
        // the conventions of a character array
        fileString[uncompressedFileSize] = '\0';
     }
   if (fileString)
     {
        // Parse the file if there was an actual string returned from the
        // loader
        loaded = json_loads(fileString, 0, &loadedErrors);
        if (!loaded)
          {
             Log_ERR("Could not load %s:\n%s", tempFileName.c_str(), loadedErrors.text);
             return NULL;
          }
        else
          {
             return loaded;
          }
     }
   else
     {
        Log_ERR("Could not load %s: File was empty!", tempFileName.c_str());
        return NULL;
     }
}
ErrorReturn
ImpactLoader::config_parse(std::string fileName)
{
   config = file_load(fileName);
   if (config)
     {
        fileName = json_string_value(json_object_get(config, "ChapterList"));
        chapters = file_load(fileName);
        fileName = json_string_value(json_object_get(config, "TilesetList"));
        tilesets = file_load(fileName);
        return RETURN_NORMAL;
     }
   else
     {
        Log_ERR("Could not load config file!");
        return RETURN_ERROR;
     }
}
ErrorReturn
ImpactLoader::level_load(EntityTilemap *tileData, std::string level)
{
   json_t *loadedLevel = NULL;
   if (loadedChapter)
     {
        loadedLevel = json_object_get(json_object_get(loadedChapter, "Levels"), level.c_str());
        if (loadedLevel)
          {
             (*tileData).height = json_integer_value(json_object_get(loadedLevel, "Height"));
             (*tileData).width = json_integer_value(json_object_get(loadedLevel, "Width"));
             (*tileData).tileMap.reserve((*tileData).height * (*tileData).width);
             json_t *tilemapArray = json_object_get(loadedLevel, "Tilemap");
             if (tilemapArray && json_is_array(tilemapArray))
               {
                  for (int i = 0; i < json_array_size(tilemapArray); i++)
                    {
                       (*tileData).tileMap.push_back(json_integer_value(json_array_get(tilemapArray, i)));
                    }
               }
             else
               {
                  Log_WARN("Level data TileMap from level %s is not an array.", level.c_str());
                  return RETURN_ERROR;
               }
          }
        else
          {
             Log_ERR("Could not load level %s!", level.c_str());
             return RETURN_ERROR;
          }
     }
   else
     {
        Log_WARN("No loaded chapter.");
        return RETURN_ERROR;
     }
   return RETURN_NORMAL;
}

ErrorReturn
ImpactLoader::chapter_load(int chapterNumber)
{
   if (json_array_size(chapters) < chapterNumber)
     {
        Log_ERR("Chapter number %i is greater than the number of chapters available!", chapterNumber);
        return RETURN_ERROR;
     }
   std::string fileName = json_string_value(json_array_get(chapters, chapterNumber - 1));
   loadedChapter = file_load(fileName);
   if (loadedChapter)
     {
        Log_DBG("Loaded chapter number %i, %s.", chapterNumber, fileName.c_str());
        return RETURN_NORMAL;
     }
   else
     {
        Log_ERR("Could not open chapter number %i, %s!", chapterNumber, fileName.c_str());
        return RETURN_ERROR;
     }
}
